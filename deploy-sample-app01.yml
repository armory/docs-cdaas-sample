---
version: v1
kind: kubernetes
application: sample-app-01
# Map of Deployment Targets, this is set up in a way where
# we can do multi-target deployments (multi-region or multi-cluster)
targets:
  # This in the name of a deployment. Underneath it is its configuration.
  dev:
    # the name of an agent configured account
    account: demo-rna-dev-cluster
    # Optionally override the namespaces that are in the manifests
    namespace: demo-dev
    # This is the key to a strategy under the strategies map
    strategy: rolling
  test:
    # the name of an agent configured account
    account: demo-rna-staging-cluster
    # Optionally override the namespaces that are in the manifests
    namespace: demo-staging
    # This is the key to a strategy under the strategies map
    strategy: rolling
    constraints:
      dependsOn: ["dev"]
      beforeDeployment: []
  staging:
    # the name of an agent configured account
    account: demo-rna-prod-us-cluster
    # Optionally override the namespaces that are in the manifests
    namespace: demo-prod-us
    # This is the key to a strategy under the strategies map
    strategy: mycanary
    constraints:
      dependsOn: ["staging"]
      beforeDeployment:
        - pause:
            untilApproved: true
  prod:
    # the name of an agent configured account
    account: demo-rna-prod-eu-cluster
    # Optionally override the namespaces that are in the manifests
    namespace: demo-prod-eu
    # This is the key to a strategy under the strategies map
    strategy: myBlueGreen
    constraints:
      dependsOn: ["staging"]
      beforeDeployment:
        - pause:
            untilApproved: true
# The list of manifests sources
manifests:
  # This reads all YAML files in a dir
  # and deploys manifests in that dir to all targets.
  - path: manifests/sample-app01.yml
# The map of strategies, a deployment target will reference one of these
strategies:
  # This is the name for the strategy
  mycanary:
    # This map key is the deployment strategy type
    canary:
      steps:
        # The map key is the step type
        - setWeight:
            weight: 25
        - analysis:
            interval: 7
            units: seconds
            numberOfJudgmentRuns: 1
            rollBackMode: manual
            rollForwardMode: automatic
            queries:
              - avgCPUUsage-pass
        - setWeight:
            weight: 50
        - analysis:
            interval: 7
            units: seconds
            numberOfJudgmentRuns: 3
            rollBackMode: manual
            rollForwardMode: manual
            queries:
              - avgCPUUsage-fail
              - avgCPUUsage-pass
        - setWeight:
            weight: 100
  rolling:
    canary:
      steps:
        - setWeight:
            weight: 100
  myBlueGreen:
    blueGreen:
      activeService: potato-facts-external
      redirectTrafficAfter:
        - analysis:
            interval: 7
            units: seconds
            numberOfJudgmentRuns: 1
            rollBackMode: manual
            rollForwardMode: automatic
            queries:
              - avgCPUUsage-pass
      shutDownOldVersionAfter:
        - pause:
            untilApproved: true
analysis:
  defaultMetricProviderName: Demo-Prometheus
  queries:
    - name: avgCPUUsage-pass
      upperLimit: 10000
      lowerLimit: 0
      queryTemplate: >-
        avg (avg_over_time(container_cpu_system_seconds_total{job="kubelet"}[{{armory.promQlStepInterval}}]) * on (pod)  group_left (annotation_app)
        sum(kube_pod_annotations{job="kube-state-metrics",annotation_deploy_armory_io_replica_set_name="{{armory.replicaSetName}}"})
        by (annotation_app, pod)) by (annotation_app)
    - name: invalidQuery
      upperLimit: 10000
      lowerLimit: 0
      queryTemplate: >-
        avg (avg_over_time(c
    - name: avgCPUUsage-fail
      upperLimit: 1
      lowerLimit: 0
      queryTemplate: >-
        avg (avg_over_time(container_cpu_system_seconds_total{job="kubelet"}[{{armory.promQlStepInterval}}]) * on (pod)  group_left (annotation_app)
        sum(kube_pod_annotations{job="kube-state-metrics",annotation_deploy_armory_io_replica_set_name="{{armory.replicaSetName}}"})
        by (annotation_app, pod)) by (annotation_app)
